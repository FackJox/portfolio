/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 .\face anim combined fixed anims.glb --transform
*/

import React, { useRef, useState, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import * as THREE from "three";

export default function Head(props) {
	const group = useRef();
	const { nodes, materials, animations } = useGLTF("/head.glb");
	const { actions, mixer } = useAnimations(animations, group);
	const clock = new THREE.Clock();
	const [mousePos, setMousePos] = useState({ x: 0, y: 0 });

	useEffect(() => {
		const handleMouseMove = (e) => {
			const x = e.clientX / window.innerWidth;
			const y = e.clientY / window.innerHeight;
			setMousePos({ x, y });
		};

		window.addEventListener("mousemove", handleMouseMove);
		return () => {
			window.removeEventListener("mousemove", handleMouseMove);
		};
	}, []);

  

	useEffect(() => {
		const idleAction = actions["Idle"];
		const idleBackwardsNoEyesAction = actions["IdleBackwardsNoEyes"];
		console.log("ðŸš€ ~ file: Head.jsx:33 ~ useEffect ~ actions:", actions);
		const leftFaceAction = actions["RightFace"];
		const leftSkullAction = actions["RightSkull"];
		const rightFaceAction = actions["LeftFace"];
		const rightSkullAction = actions["LeftSkull"];
		const bottomFaceAction = actions["BottomFace"];

		const updateAnimations = () => {
      let targetLeftFaceTime = 0;
      let targetRightFaceTime = 0;
      let targetBottomFaceTime = 0;
    
      if (mousePos.x <= 0.45 && mousePos.x >= 0.2 && mousePos.y < 0.5) {
        targetLeftFaceTime = (mousePos.x * 2 - 1) * rightFaceAction.getClip().duration;
      }
    
      if (mousePos.x >= 0.55 && mousePos.x <= 0.8 && mousePos.y < 0.5) {
        targetRightFaceTime = (mousePos.x * 2 - 1) * leftFaceAction.getClip().duration;
      }
    
      if (mousePos.y > 0.5 && mousePos.y <= 0.8) {
        targetBottomFaceTime = (mousePos.y * 2 - 1) * bottomFaceAction.getClip().duration;
      }
    
      leftFaceAction.time = targetRightFaceTime / 2;
      leftSkullAction.time = targetRightFaceTime / 2;
      rightFaceAction.time = targetLeftFaceTime / 2;
      rightSkullAction.time = targetLeftFaceTime / 2;
      bottomFaceAction.time = targetBottomFaceTime / 2;
    
      const blendFactor = 0.1; // Adjust this value to control the blend smoothness
    
      leftFaceAction.time = THREE.MathUtils.lerp(leftFaceAction.time, targetRightFaceTime, blendFactor);
      leftSkullAction.time = THREE.MathUtils.lerp(leftSkullAction.time, targetRightFaceTime, blendFactor);
      rightFaceAction.time = THREE.MathUtils.lerp(rightFaceAction.time, targetLeftFaceTime, blendFactor);
      rightSkullAction.time = THREE.MathUtils.lerp(rightSkullAction.time, targetLeftFaceTime, blendFactor);
      bottomFaceAction.time = THREE.MathUtils.lerp(bottomFaceAction.time, targetBottomFaceTime, blendFactor);
    };

    
		const animate = () => {
			const delta = clock.getDelta();
			mixer.update(delta);
			updateAnimations();
			requestAnimationFrame(animate);
		};

		leftFaceAction.clampWhenFinished = true;
		leftSkullAction.clampWhenFinished = true;
		rightFaceAction.clampWhenFinished = true;
		rightSkullAction.clampWhenFinished = true;
		bottomFaceAction.clampWhenFinished = true;


		leftFaceAction.play();
		leftSkullAction.play();
		rightFaceAction.play();
		rightSkullAction.play();
		bottomFaceAction.play();
		animate();

    const playIdleAnimations = async () => {
      // Play the first idle animation
      leftFaceAction.reset().play();
      console.log("made it aby")
      await new Promise((resolve) => setTimeout(resolve, leftFaceAction.getClip().duration * 1000));
    
      // Play the second idle animation
      rightFaceAction.reset().play();
      await new Promise((resolve) => setTimeout(resolve, rightFaceAction.getClip().duration * 1000));
    
      // Play both idle animations together
      leftFaceAction.reset().play();
      rightFaceAction.reset().play();
      await new Promise((resolve) => setTimeout(resolve, leftFaceAction.getClip().duration * 1000));
    
      // Repeat the sequence
      playIdleAnimations();
    };
   
    playIdleAnimations();
    
	}, [mousePos, actions, mixer]);

	return (
		<group
			ref={group}
			{...props}
			dispose={null}
		>
			<group name="Scene">
				<group name="r_skul">
					<primitive object={nodes.Bone} />
					<group name="SkullR">
						<skinnedMesh
							name="Icosphere001"
							geometry={nodes.Icosphere001.geometry}
							material={materials.hair}
							skeleton={nodes.Icosphere001.skeleton}
						/>
						<skinnedMesh
							name="Icosphere001_1"
							geometry={nodes.Icosphere001_1.geometry}
							material={materials["FB HEAD UKRAIN"]}
							skeleton={nodes.Icosphere001_1.skeleton}
						/>
					</group>
				</group>
				<group name="l_skull">
					<primitive object={nodes.Bone_1} />
					<group name="SkullL">
						<skinnedMesh
							name="Icosphere002"
							geometry={nodes.Icosphere002.geometry}
							material={materials.hair}
							skeleton={nodes.Icosphere002.skeleton}
						/>
						<skinnedMesh
							name="Icosphere002_1"
							geometry={nodes.Icosphere002_1.geometry}
							material={materials["FB HEAD UKRAIN"]}
							skeleton={nodes.Icosphere002_1.skeleton}
						/>
					</group>
				</group>
				<group name="face_deform">
					<primitive object={nodes["DEF-earL"]} />
					<primitive object={nodes["DEF-earL001"]} />
					<primitive object={nodes["DEF-earL002"]} />
					<primitive object={nodes["DEF-earL004"]} />
					<primitive object={nodes["DEF-earR"]} />
					<primitive object={nodes["DEF-earR001"]} />
					<primitive object={nodes["DEF-earR002"]} />
					<primitive object={nodes["DEF-earR004"]} />
					<primitive object={nodes["DEF-teethT"]} />
					<primitive object={nodes["DEF-nose002"]} />
					<primitive object={nodes["DEF-noseL001"]} />
					<primitive object={nodes["DEF-noseR001"]} />
					<primitive object={nodes["DEF-eye_masterL"]} />
					<primitive object={nodes["DEF-lidBL"]} />
					<primitive object={nodes["DEF-lidTL"]} />
					<primitive object={nodes["DEF-eyeL"]} />
					<primitive object={nodes["DEF-eye_masterR"]} />
					<primitive object={nodes["DEF-lidBR"]} />
					<primitive object={nodes["DEF-lidTR"]} />
					<primitive object={nodes["DEF-eyeR"]} />
					<primitive object={nodes["DEF-teethB"]} />
					<primitive object={nodes["DEF-tongue"]} />
					<primitive object={nodes["DEF-jaw_master"]} />
					<primitive object={nodes["DEF-chin"]} />
					<primitive object={nodes["DEF-jaw"]} />
					<primitive object={nodes["DEF-jawL"]} />
					<primitive object={nodes["DEF-jawR"]} />
					<primitive object={nodes["DEF-lipTL"]} />
					<primitive object={nodes["DEF-lipTR"]} />
					<primitive object={nodes["DEF-lipBL"]} />
					<primitive object={nodes["DEF-lipBR"]} />
					<primitive object={nodes["DEF-browBL"]} />
					<primitive object={nodes["DEF-browBL004"]} />
					<primitive object={nodes["DEF-browBR"]} />
					<primitive object={nodes["DEF-browBR004"]} />
					<primitive object={nodes["DEF-browTL"]} />
					<primitive object={nodes["DEF-browTL001"]} />
					<primitive object={nodes["DEF-browTL003"]} />
					<primitive object={nodes["DEF-browTR"]} />
					<primitive object={nodes["DEF-browTR001"]} />
					<primitive object={nodes["DEF-browTR003"]} />
					<primitive object={nodes["DEF-cheekBL"]} />
					<primitive object={nodes["DEF-cheekBR"]} />
					<primitive object={nodes["DEF-cheekTL"]} />
					<primitive object={nodes["DEF-cheekTR"]} />
					<primitive object={nodes["DEF-foreheadL"]} />
					<primitive object={nodes["DEF-foreheadL001"]} />
					<primitive object={nodes["DEF-foreheadL002"]} />
					<primitive object={nodes["DEF-foreheadR"]} />
					<primitive object={nodes["DEF-foreheadR001"]} />
					<primitive object={nodes["DEF-foreheadR002"]} />
					<primitive object={nodes["DEF-nose"]} />
					<primitive object={nodes["DEF-nose004"]} />
					<primitive object={nodes["DEF-templeL"]} />
					<primitive object={nodes["DEF-templeR"]} />
					<group name="EyeL">
						<skinnedMesh
							name="Sphere002"
							geometry={nodes.Sphere002.geometry}
							material={materials.cornear}
							skeleton={nodes.Sphere002.skeleton}
						/>
						<skinnedMesh
							name="Sphere002_1"
							geometry={nodes.Sphere002_1.geometry}
							material={materials.Eye}
							skeleton={nodes.Sphere002_1.skeleton}
						/>
					</group>
					<group name="EyeR">
						<skinnedMesh
							name="Sphere001"
							geometry={nodes.Sphere001.geometry}
							material={materials.cornear}
							skeleton={nodes.Sphere001.skeleton}
						/>
						<skinnedMesh
							name="Sphere001_1"
							geometry={nodes.Sphere001_1.geometry}
							material={materials.Eye}
							skeleton={nodes.Sphere001_1.skeleton}
						/>
					</group>
					<skinnedMesh
						name="LowerTeeth"
						geometry={nodes.LowerTeeth.geometry}
						material={materials["wire_134006006.001"]}
						skeleton={nodes.LowerTeeth.skeleton}
					/>
					<skinnedMesh
						name="Tongue"
						geometry={nodes.Tongue.geometry}
						material={materials.wire_143224087}
						skeleton={nodes.Tongue.skeleton}
					/>
					<skinnedMesh
						name="UpperTeeth"
						geometry={nodes.UpperTeeth.geometry}
						material={materials["wire_134006006.001"]}
						skeleton={nodes.UpperTeeth.skeleton}
					/>
					<group name="head">
						<skinnedMesh
							name="Icosphere"
							geometry={nodes.Icosphere.geometry}
							material={materials.Insidemouth}
							skeleton={nodes.Icosphere.skeleton}
							morphTargetDictionary={
								nodes.Icosphere.morphTargetDictionary
							}
							morphTargetInfluences={
								nodes.Icosphere.morphTargetInfluences
							}
						/>
						<skinnedMesh
							name="Icosphere_1"
							geometry={nodes.Icosphere_1.geometry}
							material={materials.hair}
							skeleton={nodes.Icosphere_1.skeleton}
							morphTargetDictionary={
								nodes.Icosphere_1.morphTargetDictionary
							}
							morphTargetInfluences={
								nodes.Icosphere_1.morphTargetInfluences
							}
						/>
						<skinnedMesh
							name="Icosphere_2"
							geometry={nodes.Icosphere_2.geometry}
							material={materials["FB HEAD UKRAIN"]}
							skeleton={nodes.Icosphere_2.skeleton}
							morphTargetDictionary={
								nodes.Icosphere_2.morphTargetDictionary
							}
							morphTargetInfluences={
								nodes.Icosphere_2.morphTargetInfluences
							}
						/>
					</group>
				</group>
				<mesh
					name="brain"
					geometry={nodes.brain.geometry}
					material={materials["default.001"]}
				/>
			</group>
		</group>
	);
}

useGLTF.preload("/head.glb");
