/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 .\face anim combined fixed anims.glb --transform
*/

import React, { useRef, useState, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useThree, useFrame } from "@react-three/fiber";
import * as THREE from "three";

const randomDelay = Math.floor(Math.random() * (15000 - 5000 + 1) + 5000);
await new Promise((resolve) => setTimeout(resolve, randomDelay));

export default function Head(props) {
	const group = useRef();
	const { nodes, materials, animations } = useGLTF("/head.glb");
	const { actions, mixer } = useAnimations(animations, group);
	const clock = new THREE.Clock();

	// const { scene } = useThree();

	const idleAction = actions["Idle"];
	const idleBackwardsNoEyesAction = actions["IdleBackwardsNoEyes"];
	const leftFaceAction = actions["RightFace"];
	const leftSkullAction = actions["RightSkull"];
	const rightFaceAction = actions["LeftFace"];
	const rightSkullAction = actions["LeftSkull"];
	const bottomFaceAction = actions["BottomFace"];

	// useEffect(() => {
	// 	console.log("inside use effect1", mixer._actions )

	// 	console.log("inside use effect2", actions)
	// 	if (mixer && mixer._actions) {
	// 	  console.log("Current animation:", mixer.clipAction(mixer._actions[0].clip).getClip().name);
	// 	}
	//   }, [mixer]);

	// useEffect(() => {
	// 	console.info(
	// 		"ðŸš€ ~ file: Head.jsx:36 ~ useEffect ~ idleAction:",
	// 		idleAction.isRunning()
	// 	);
	// 	console.info(
	// 		"ðŸš€ ~ file: Head.jsx:38 ~ useEffect ~ idleBackwardsNoEyesAction:",
	// 		idleBackwardsNoEyesAction.isRunning()
	// 	);
	// 	console.info(
	// 		"ðŸš€ ~ file: Head.jsx:40 ~ useEffect ~ leftFaceAction:",
	// 		leftFaceAction.isRunning()
	// 	);
	// 	console.info(
	// 		"ðŸš€ ~ file: Head.jsx:42 ~ useEffect ~ leftSkullAction:",
	// 		leftSkullAction.isRunning()
	// 	);
	// 	console.info(
	// 		"ðŸš€ ~ file: Head.jsx:44 ~ useEffect ~ rightFaceAction:",
	// 		rightFaceAction.isRunning()
	// 	);
	// 	console.info(
	// 		"ðŸš€ ~ file: Head.jsx:46 ~ useEffect ~ rightSkullAction:",
	// 		rightSkullAction.isRunning()
	// 	);
	// 	console.info(
	// 		"ðŸš€ ~ file: Head.jsx:48 ~ useEffect ~ bottomFaceAction:",
	// 		bottomFaceAction.isRunning()
	// 	);
	// }, [
	// 	idleAction,
	// 	idleBackwardsNoEyesAction,
	// 	leftFaceAction,
	// 	leftSkullAction,
	// 	rightFaceAction,
	// 	rightSkullAction,
	// 	bottomFaceAction,
	// ]);

	const [mousePos, setMousePos] = useState({ x: 0.5, y: 0.5 });
	const mousePosRef = useRef(mousePos)

	useEffect(() => {
		mousePosRef.current = mousePos;
	  }, [mousePos]);
	

	useEffect(() => {
		const handleMouseMove = (e) => {
			const x = e.clientX / window.innerWidth;
			const y = e.clientY / window.innerHeight;
			setMousePos({ x, y });
			// console.log("mouse POS", mousePos);
		};

		window.addEventListener("mousemove", handleMouseMove);
		return () => window.removeEventListener("mousemove", handleMouseMove);
	}, [mousePos]);

	useFrame((_, delta) => {
		// handleAnimation(mousePosRef.current);
		mixer.update(delta);
		// console.log("ðŸš€ ~ file: Head.jsx:98 ~ useFrame ~ mousePosRef.current:", mousePosRef.current)
	});


	useEffect(() => {
		// const handleAnimation = () => {
		// 	if (actions) {
				let mousePos = mousePosRef.current
				
				console.log("ðŸš€ ~ file: Head.jsx:107 ~ useEffect ~ mousePos:", mousePos)
				mixer.stopAllAction();

				if (mousePos.x <= 0.45 && mousePos.y <= 0.45) {
					const progress = 1 - mousePos.x / 0.45;
					leftFaceAction.time =
						leftFaceAction._clip.duration * progress;
					leftSkullAction.time =
						leftSkullAction._clip.duration * progress;
					leftFaceAction.clampWhenFinished = true;
					leftFaceAction.loop = THREE.LoopOnce;
					leftSkullAction.clampWhenFinished = true;
					leftSkullAction.loop = THREE.LoopOnce;
					leftFaceAction.play();
					leftSkullAction.play();
				} else if (mousePos.x >= 0.55 && mousePos.y <= 0.45) {
					const progress = (mousePos.x - 0.55) / 0.25;
					rightFaceAction.time =
						rightFaceAction._clip.duration * progress;
					rightSkullAction.time =
						rightSkullAction._clip.duration * progress;
					rightFaceAction.clampWhenFinished = true;
					rightFaceAction.loop = THREE.LoopOnce;
					rightSkullAction.clampWhenFinished = true;
					rightSkullAction.loop = THREE.LoopOnce;
					rightFaceAction.play();
					rightSkullAction.play();
				} else if (mousePos.y >= 0.55) {
					const progress = (mousePos.y - 0.55) / 0.25;
					bottomFaceAction.time =
						bottomFaceAction._clip.duration * progress;
					bottomFaceAction.clampWhenFinished = true;
					bottomFaceAction.loop = THREE.LoopOnce;
					bottomFaceAction.play();
				}

				
			// };

			// handleAnimation()
		// }
	}, [mousePosRef.current, actions]);

	useEffect(() => {
		const idleAction = actions["Idle"];
		const idleBackwardsNoEyesAction = actions["IdleBackwardsNoEyes"];

		const playIdleAnimations = async () => {
			// Play the first idle animation
			idleAction.reset().play();
			console.log("made it aby");
			await new Promise((resolve) => {
				setTimeout(
					resolve,
					idleBackwardsNoEyesAction.getClip().duration * 1000 +
						randomDelay
				);
			});

			idleAction.stop();

			idleBackwardsNoEyesAction.reset().play();
			await new Promise((resolve) => {
				setTimeout(
					resolve,
					idleAction.getClip().duration * 1000 + randomDelay
				);
			});
			// Stop the second idle animation
			idleBackwardsNoEyesAction.stop();

			// Play both idle animations together
			idleBackwardsNoEyesAction.reset().play();
			idleAction.reset().play();
			await new Promise((resolve) => {
				setTimeout(
					resolve,
					idleBackwardsNoEyesAction.getClip().duration * 1000 +
						randomDelay
				);
			});

			idleAction.stop();
			idleBackwardsNoEyesAction.stop();
			// Repeat the sequence
			playIdleAnimations();
		};

		playIdleAnimations();
	}, [mousePos, actions, mixer]);

	return (
		<group
			ref={group}
			{...props}
			dispose={null}
		>
			<group name="Scene">
				<group name="r_skul">
					<primitive object={nodes.Bone} />
					<group name="SkullR">
						<skinnedMesh
							name="Icosphere001"
							geometry={nodes.Icosphere001.geometry}
							material={materials.hair}
							skeleton={nodes.Icosphere001.skeleton}
						/>
						<skinnedMesh
							name="Icosphere001_1"
							geometry={nodes.Icosphere001_1.geometry}
							material={materials["FB HEAD UKRAIN"]}
							skeleton={nodes.Icosphere001_1.skeleton}
						/>
					</group>
				</group>
				<group name="l_skull">
					<primitive object={nodes.Bone_1} />
					<group name="SkullL">
						<skinnedMesh
							name="Icosphere002"
							geometry={nodes.Icosphere002.geometry}
							material={materials.hair}
							skeleton={nodes.Icosphere002.skeleton}
						/>
						<skinnedMesh
							name="Icosphere002_1"
							geometry={nodes.Icosphere002_1.geometry}
							material={materials["FB HEAD UKRAIN"]}
							skeleton={nodes.Icosphere002_1.skeleton}
						/>
					</group>
				</group>
				<group name="face_deform">
					<primitive object={nodes["DEF-earL"]} />
					<primitive object={nodes["DEF-earL001"]} />
					<primitive object={nodes["DEF-earL002"]} />
					<primitive object={nodes["DEF-earL004"]} />
					<primitive object={nodes["DEF-earR"]} />
					<primitive object={nodes["DEF-earR001"]} />
					<primitive object={nodes["DEF-earR002"]} />
					<primitive object={nodes["DEF-earR004"]} />
					<primitive object={nodes["DEF-teethT"]} />
					<primitive object={nodes["DEF-nose002"]} />
					<primitive object={nodes["DEF-noseL001"]} />
					<primitive object={nodes["DEF-noseR001"]} />
					<primitive object={nodes["DEF-eye_masterL"]} />
					<primitive object={nodes["DEF-lidBL"]} />
					<primitive object={nodes["DEF-lidTL"]} />
					<primitive object={nodes["DEF-eyeL"]} />
					<primitive object={nodes["DEF-eye_masterR"]} />
					<primitive object={nodes["DEF-lidBR"]} />
					<primitive object={nodes["DEF-lidTR"]} />
					<primitive object={nodes["DEF-eyeR"]} />
					<primitive object={nodes["DEF-teethB"]} />
					<primitive object={nodes["DEF-tongue"]} />
					<primitive object={nodes["DEF-jaw_master"]} />
					<primitive object={nodes["DEF-chin"]} />
					<primitive object={nodes["DEF-jaw"]} />
					<primitive object={nodes["DEF-jawL"]} />
					<primitive object={nodes["DEF-jawR"]} />
					<primitive object={nodes["DEF-lipTL"]} />
					<primitive object={nodes["DEF-lipTR"]} />
					<primitive object={nodes["DEF-lipBL"]} />
					<primitive object={nodes["DEF-lipBR"]} />
					<primitive object={nodes["DEF-browBL"]} />
					<primitive object={nodes["DEF-browBL004"]} />
					<primitive object={nodes["DEF-browBR"]} />
					<primitive object={nodes["DEF-browBR004"]} />
					<primitive object={nodes["DEF-browTL"]} />
					<primitive object={nodes["DEF-browTL001"]} />
					<primitive object={nodes["DEF-browTL003"]} />
					<primitive object={nodes["DEF-browTR"]} />
					<primitive object={nodes["DEF-browTR001"]} />
					<primitive object={nodes["DEF-browTR003"]} />
					<primitive object={nodes["DEF-cheekBL"]} />
					<primitive object={nodes["DEF-cheekBR"]} />
					<primitive object={nodes["DEF-cheekTL"]} />
					<primitive object={nodes["DEF-cheekTR"]} />
					<primitive object={nodes["DEF-foreheadL"]} />
					<primitive object={nodes["DEF-foreheadL001"]} />
					<primitive object={nodes["DEF-foreheadL002"]} />
					<primitive object={nodes["DEF-foreheadR"]} />
					<primitive object={nodes["DEF-foreheadR001"]} />
					<primitive object={nodes["DEF-foreheadR002"]} />
					<primitive object={nodes["DEF-nose"]} />
					<primitive object={nodes["DEF-nose004"]} />
					<primitive object={nodes["DEF-templeL"]} />
					<primitive object={nodes["DEF-templeR"]} />
					<group name="EyeL">
						<skinnedMesh
							name="Sphere002"
							geometry={nodes.Sphere002.geometry}
							material={materials.cornear}
							skeleton={nodes.Sphere002.skeleton}
						/>
						<skinnedMesh
							name="Sphere002_1"
							geometry={nodes.Sphere002_1.geometry}
							material={materials.Eye}
							skeleton={nodes.Sphere002_1.skeleton}
						/>
					</group>
					<group name="EyeR">
						<skinnedMesh
							name="Sphere001"
							geometry={nodes.Sphere001.geometry}
							material={materials.cornear}
							skeleton={nodes.Sphere001.skeleton}
						/>
						<skinnedMesh
							name="Sphere001_1"
							geometry={nodes.Sphere001_1.geometry}
							material={materials.Eye}
							skeleton={nodes.Sphere001_1.skeleton}
						/>
					</group>
					<skinnedMesh
						name="LowerTeeth"
						geometry={nodes.LowerTeeth.geometry}
						material={materials["wire_134006006.001"]}
						skeleton={nodes.LowerTeeth.skeleton}
					/>
					<skinnedMesh
						name="Tongue"
						geometry={nodes.Tongue.geometry}
						material={materials.wire_143224087}
						skeleton={nodes.Tongue.skeleton}
					/>
					<skinnedMesh
						name="UpperTeeth"
						geometry={nodes.UpperTeeth.geometry}
						material={materials["wire_134006006.001"]}
						skeleton={nodes.UpperTeeth.skeleton}
					/>
					<group name="head">
						<skinnedMesh
							name="Icosphere"
							geometry={nodes.Icosphere.geometry}
							material={materials.Insidemouth}
							skeleton={nodes.Icosphere.skeleton}
							morphTargetDictionary={
								nodes.Icosphere.morphTargetDictionary
							}
							morphTargetInfluences={
								nodes.Icosphere.morphTargetInfluences
							}
						/>
						<skinnedMesh
							name="Icosphere_1"
							geometry={nodes.Icosphere_1.geometry}
							material={materials.hair}
							skeleton={nodes.Icosphere_1.skeleton}
							morphTargetDictionary={
								nodes.Icosphere_1.morphTargetDictionary
							}
							morphTargetInfluences={
								nodes.Icosphere_1.morphTargetInfluences
							}
						/>
						<skinnedMesh
							name="Icosphere_2"
							geometry={nodes.Icosphere_2.geometry}
							material={materials["FB HEAD UKRAIN"]}
							skeleton={nodes.Icosphere_2.skeleton}
							morphTargetDictionary={
								nodes.Icosphere_2.morphTargetDictionary
							}
							morphTargetInfluences={
								nodes.Icosphere_2.morphTargetInfluences
							}
						/>
					</group>
				</group>
				<mesh
					name="brain"
					geometry={nodes.brain.geometry}
					material={materials["default.001"]}
				/>
			</group>
		</group>
	);
}

useGLTF.preload("/head.glb");
